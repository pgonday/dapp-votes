{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","storageValue","accounts","contract","status","err","registered","proposals","winner","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","on","error","setState","getStatus","alert","methods","workflowStatus","call","getProposals","result","map","value","i","id","description","getWinningProposal","getWhitelist","manageErr","startProposalsRegistration","send","from","updateStatus","stopProposalsRegistration","closeProposalsRegistration","startVotingSession","stopVotingSession","closeVotingSession","_proposalId","_description","voteCount","_voteCount","addAddress","addToWhitelist","retAddress","events","VoterRegistered","returnValues","voterAddress","addProposal","proposal","propose","retProposal","ProposalRegistered","proposalId","addVote","vote","Voted","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","setAddressRef","element","setProposalRef","this","WorkflowStatusChange","newStatus","msg","message","includes","exec","Navbar","variant","bg","Brand","className","src","alt","height","Collapse","NavDropdown","title","getStatusDisplay","Header","Item","disabled","isRegisteringVoters","onClick","isProposalsRegistrationStarted","Divider","isProposalsRegistrationEnded","isVotingSessionStarted","Alert","Heading","Container","fluid","Row","Form","Group","controlId","Label","Control","type","onFocus","e","target","select","ref","Button","ListGroup","item","key","as","rows","Col","xs","isVotingSessionEnded","isVotesTallied","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83380098.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\nimport VotingContract from \"./contracts/Voting.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\n\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport \"./App.css\";\r\n\r\n\r\nclass App extends Component {\r\n \r\n  state = { storageValue: 0, web3: null, accounts: null, contract: null, \r\n    status: 0, err: null, registered: [], proposals: [], winner: null };\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = VotingContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        VotingContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      // Callback when account is changed in Metamask\r\n      window.ethereum.on('accountsChanged', async () => {\r\n        await web3.eth.getAccounts((error, accounts) => {\r\n          console.log(`Accounts updated ${accounts}`);\r\n          this.setState({ accounts: accounts });\r\n        });\r\n      });\r\n\r\n      this.setState({ web3, accounts, contract: instance }, this.getStatus);\r\n    } catch (error) {\r\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`,);\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n\r\n  getStatus = async () => {\r\n    const { contract } = this.state;\r\n\r\n    try {\r\n      const status = await contract.methods.workflowStatus().call();\r\n      console.log(`status=${status}`);\r\n\r\n      this.setState({ status: status });\r\n\r\n      // Restore data\r\n      if (status !== '0') {\r\n        console.log(`Reload proposals`);\r\n        const result = await contract.methods.getProposals().call();\r\n        this.setState({proposals: result.map((value, i) => { return { id: i, description: value };}) });\r\n\r\n        if (status === '4' || status === '5') {\r\n          this.getWinningProposal();\r\n        }\r\n      }\r\n      else {\r\n        console.log(`Reload whitelist`);\r\n        const result = await contract.methods.getWhitelist().call();\r\n        this.setState({registered: result});\r\n      }\r\n    }\r\n    catch (err) {\r\n      this.manageErr(err);\r\n    }\r\n  };\r\n\r\n\r\n  // ===== WorkflowStatus utilities functions =====\r\n\r\n  getStatusDisplay() {\r\n    const { status } = this.state;\r\n\r\n    switch (status) {\r\n      case '0': return 'Registering voters';\r\n      case '1': return 'Proposals registration started';\r\n      case '2': return 'Proposals registration ended';\r\n      case '3': return 'Voting session started';\r\n      case '4': return 'Voting session ended';\r\n      case '5': return 'Votes tallied';\r\n      default: return \"UNKNOWN STATUS\";\r\n    }    \r\n  }\r\n\r\n\r\n  isRegisteringVoters() { return this.state.status === '0'; }\r\n  isProposalsRegistrationStarted() { return this.state.status === '1'; }\r\n  isProposalsRegistrationEnded() { return this.state.status === '2'; }\r\n  isVotingSessionStarted() { return this.state.status === '3'; }\r\n  isVotingSessionEnded() { return this.state.status === '4'; }\r\n  isVotesTallied() { return this.state.status === '5'; }\r\n\r\n\r\n  // ===== Admin workflowStatus update functions =====\r\n\r\n  startProposalsRegistration = async () => {\r\n    try {\r\n      const { accounts, contract } = this.state;\r\n      const result = await contract.methods.startProposalsRegistration().send({ from: accounts[0]});\r\n      this.updateStatus(result);\r\n    }\r\n    catch (err) {\r\n      this.manageErr(err);\r\n    }\r\n  }\r\n\r\n\r\n  stopProposalsRegistration = async () => {\r\n    try {\r\n      const { accounts, contract } = this.state;\r\n      const result = await contract.methods.closeProposalsRegistration().send({ from: accounts[0]});\r\n      this.updateStatus(result);\r\n    }\r\n    catch (err) {\r\n      this.manageErr(err);\r\n    }\r\n  }\r\n\r\n\r\n  startVotingSession = async () => {\r\n    try {\r\n      const { accounts, contract } = this.state;\r\n      const result = await contract.methods.startVotingSession().send({ from: accounts[0]});\r\n      this.updateStatus(result);\r\n    }\r\n    catch (err) {\r\n      this.manageErr(err);\r\n    }\r\n  }\r\n\r\n\r\n  stopVotingSession = async () => {\r\n    try {\r\n      const { accounts, contract } = this.state;\r\n      const result = await contract.methods.closeVotingSession().send({ from: accounts[0]});\r\n      this.updateStatus(result);\r\n\r\n      this.getWinningProposal();\r\n    }\r\n    catch (err) {\r\n      this.manageErr(err);\r\n    }\r\n  }\r\n\r\n\r\n  updateStatus(result) {\r\n    const status = result.events.WorkflowStatusChange.returnValues.newStatus;\r\n    console.log(\"Status from event: \" + status);\r\n\r\n    this.setState({ err: null, status: status});\r\n  }\r\n\r\n\r\n  manageErr(err) {\r\n    console.log(err);\r\n    var msg = err.message;\r\n    if (msg.includes('\"data\"')) {\r\n      msg = /\"message\":\"[^:]+: revert ([^\"]+)\".*/.exec(msg)[1];\r\n    }\r\n    this.setState({ err: msg });\r\n  }\r\n\r\n\r\n  getWinningProposal = async () => {\r\n    const { accounts, contract } = this.state;\r\n    \r\n    console.log(`Get winning proposal`);\r\n    const result = await contract.methods.getWinningProposal().call();\r\n    this.setState({ winner: { id: result._proposalId, description: result._description, voteCount: result._voteCount }});\r\n  }\r\n\r\n\r\n  addAddress = async () => {\r\n    const { contract, accounts } = this.state;\r\n    const address = this.address.value;\r\n    console.log(`Add address ${address} ${accounts}`);\r\n    try {\r\n      const result = await contract.methods.addToWhitelist(address).send({from: accounts[0]});\r\n      const retAddress = result.events.VoterRegistered.returnValues.voterAddress;\r\n      this.setState({ err: null, registered: [...this.state.registered, retAddress] });\r\n    }\r\n    catch (err) {\r\n      this.manageErr(err);\r\n    }\r\n  }\r\n\r\n\r\n  addProposal = async () => {\r\n    const { contract, accounts } = this.state;\r\n    const proposal = this.proposal.value;\r\n    console.log(`Add proposal [${proposal}] [${accounts}]`);\r\n    try {\r\n      const result = await contract.methods.propose(proposal).send({from: accounts[0]});\r\n\r\n      const retProposal  = result.events.ProposalRegistered.returnValues.proposalId;\r\n      this.setState({ err: null, proposals: [...this.state.proposals, { id: retProposal, description: proposal }] });\r\n    }\r\n    catch (err) {\r\n      this.manageErr(err);\r\n    }\r\n  }\r\n\r\n\r\n  addVote = async (id) => {\r\n    const { contract, accounts } = this.state;\r\n    console.log(`Add vote [${id}] [${accounts}]`);\r\n    try {\r\n      const result = await contract.methods.vote(id).send({from: accounts[0]});\r\n\r\n      const retProposal  = result.events.Voted.returnValues.proposalId;\r\n      this.setState({ err: null });\r\n      toast.success('🧾 Voted !', {\r\n        position: \"bottom-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n    catch (err) {\r\n      this.manageErr(err);\r\n    }\r\n  }\r\n\r\n\r\n  setAddressRef = (element) => {\r\n    this.address = element;\r\n  }\r\n\r\n\r\n  setProposalRef = (element) => {\r\n    this.proposal = element;\r\n  }  \r\n\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <ToastContainer />\r\n        <Navbar variant=\"dark\" bg=\"dark\">\r\n            <Navbar.Brand className=\"brand\">\r\n              <img src=\"alyra.png\" alt=\"\" height=\"30\" className=\"d-inline-block align-top\" />\r\n              { ' ' } Voting DApp\r\n            </Navbar.Brand>\r\n            <Navbar.Collapse className=\"justify-content-end\">\r\n              <NavDropdown title={ this.getStatusDisplay() } id=\"collasible-nav-dropdown\">\r\n                <NavDropdown.Header>Proposals registration</NavDropdown.Header>\r\n                <NavDropdown.Item disabled={ !this.isRegisteringVoters() } onClick={ this.startProposalsRegistration }>Start</NavDropdown.Item>\r\n                <NavDropdown.Item disabled={ !this.isProposalsRegistrationStarted() } onClick={ this.stopProposalsRegistration }>Stop</NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Header>Voting session</NavDropdown.Header>\r\n                <NavDropdown.Item disabled={ !this.isProposalsRegistrationEnded() } onClick={ this.startVotingSession }>Start</NavDropdown.Item>\r\n                <NavDropdown.Item disabled={ !this.isVotingSessionStarted() } onClick={ this.stopVotingSession }>Stop</NavDropdown.Item>\r\n              </NavDropdown>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n{ this.state.err && \r\n        <Alert variant=\"danger\">\r\n          <Alert.Heading>Error</Alert.Heading>\r\n          <p>{this.state.err}</p>\r\n        </Alert> \r\n}\r\n{ this.isRegisteringVoters() && \r\n        <Container fluid>\r\n          <Row>&nbsp;</Row>\r\n          <Row>\r\n            <Form>\r\n              <Form.Group controlId=\"formRegistering\" >\r\n                <Form.Label>Register address</Form.Label>\r\n                <Form.Control type=\"text\" \r\n                  onFocus={e => e.target.select() }\r\n                  ref={this.setAddressRef}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Button variant=\"primary\" onClick={ () => this.addAddress() }>\r\n                Add address\r\n              </Button>\r\n            </Form>\r\n          </Row>\r\n          <Row>&nbsp;</Row>\r\n          <Row>\r\n            <ListGroup>\r\n              { this.state.registered.map(item => <ListGroup.Item key={item}>{item}</ListGroup.Item>) }\r\n            </ListGroup>\r\n          </Row>\r\n        </Container>\r\n}\r\n{ (this.isProposalsRegistrationStarted() || this.isProposalsRegistrationEnded()) &&\r\n        <Container fluid>\r\n          { this.isProposalsRegistrationStarted() &&\r\n            <Row>\r\n              <Form className=\"full\">\r\n                <Form.Group controlId=\"formProposal\" >\r\n                  <Form.Label>Proposal description :</Form.Label>\r\n                  <Form.Control as=\"textarea\" rows={5} ref={this.setProposalRef} />\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" onClick={ () => this.addProposal() } >\r\n                  Add proposal\r\n                </Button>\r\n              </Form>\r\n            </Row>\r\n          }\r\n          <Row>&nbsp;</Row>\r\n  \r\n          <Row>\r\n            <ListGroup>\r\n              { this.state.proposals.map(({id, description}) => <ListGroup.Item key={id}>{id} {description}</ListGroup.Item>) }\r\n            </ListGroup>\r\n          </Row>\r\n        </Container>\r\n}\r\n{ this.isVotingSessionStarted() &&\r\n        <Container>\r\n          <ListGroup>\r\n            { this.state.proposals.map(({id, description}) => \r\n              <ListGroup.Item key={id}>\r\n                <Row>\r\n                  <Col xs={3}>{description}</Col>\r\n                  <Col xs={1}><Button variant=\"info\" onClick={ () => this.addVote(id) }>Vote</Button> </Col>\r\n                </Row>\r\n              </ListGroup.Item>) \r\n            }\r\n          </ListGroup>\r\n        </Container>\r\n}\r\n{ (this.isVotingSessionEnded() || this.isVotesTallied()) && this.state.winner &&\r\n        <Container>\r\n          <h1>Winning proposal ({this.state.winner.voteCount} votes):</h1>\r\n          <h2>{this.state.winner.id}. {this.state.winner.description}</h2>\r\n        </Container>\r\n}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}